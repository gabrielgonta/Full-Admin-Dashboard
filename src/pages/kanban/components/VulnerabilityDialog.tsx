import { useState, useEffect } from 'react'
import { format } from 'date-fns'
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from '@/components/custom/button'
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Calendar as CalendarComponent } from "@/components/ui/calendar"
import { Calendar } from 'lucide-react'
import { Vulnerability, Severity, Comment } from '../data/schema'
import { initialUsers } from '../data/kanbans'
import { toast } from "@/components/ui/use-toast"

interface VulnerabilityDialogProps {
  isOpen: boolean
  isSeverityDialogOpen: boolean
  onOpenChange: (open: boolean) => void
  onSeverityDialogChange: (open: boolean) => void
  vulnerability: Vulnerability | null
  onSave: (vulnerability: Omit<Vulnerability, 'id' | 'status' | 'comments' | 'priority'>) => void
  onSaveSeverity: (vulnerability: Omit<Vulnerability, 'id' | 'status' | 'comments' | 'priority'>) => void
  isNewVulnerability: boolean
  addActivity: (action: string) => void
}

export default function VulnerabilityDialog({
  isOpen,
  isSeverityDialogOpen,
  onOpenChange,
  onSeverityDialogChange,
  vulnerability,
  onSave,
  onSaveSeverity,
  isNewVulnerability,
  addActivity
}: VulnerabilityDialogProps) {
  const [editedVulnerability, setEditedVulnerability] = useState<Omit<Vulnerability, 'id' | 'status' | 'comments' | 'priority'>>({
    title: '',
    severity: 'Low',
    type: '',
    score: 0,
    assignedTo: [],
    startDate: new Date(),
    endDate: new Date(),
  })
  const [newComment, setNewComment] = useState('')

  useEffect(() => {
    if (vulnerability) {
      setEditedVulnerability({
        title: vulnerability.title,
        severity: vulnerability.severity,
        type: vulnerability.type,
        score: vulnerability.score,
        assignedTo: vulnerability.assignedTo,
        startDate: vulnerability.startDate,
        endDate: vulnerability.endDate,
      })
    } else {
      setEditedVulnerability({
        title: '',
        severity: 'Low',
        type: '',
        score: 0,
        assignedTo: [],
        startDate: new Date(),
        endDate: new Date(),
      })
    }
  }, [vulnerability])

  const handleSave = () => {
    console.log("editedVulnerability", editedVulnerability)
    onSave(editedVulnerability)
    onOpenChange(false)
    addActivity(`${isNewVulnerability ? 'Added' : 'Updated'} vulnerability "${editedVulnerability.title}"`)
    toast({
      title: `Vulnerability ${isNewVulnerability ? 'added' : 'updated'}`,
      description: `${editedVulnerability.title} has been ${isNewVulnerability ? 'added' : 'updated'} successfully.`,
    })
  }
  const handleSaveSeverityDialog = () => {
    onSaveSeverity(editedVulnerability)
    onSeverityDialogChange(false)
    toast({
      title: `Vulnerability ${isNewVulnerability ? 'added' : 'updated'}`,
      description: `${editedVulnerability.title} has been ${isNewVulnerability ? 'added' : 'updated'} successfully.`,
    })
  }

  
  const handleAddComment = () => {
    if (!vulnerability || !newComment) return

    const newCommentObj: Comment = {
      id: (vulnerability.comments?.length || 0 + 1).toString(),
      user: 'Current User',
      text: newComment,
      timestamp: new Date()
    }

    setEditedVulnerability(prev => ({
      ...prev,
      comments: [...(vulnerability.comments || []), newCommentObj]
    }))

    setNewComment('')
    addActivity(`Added comment to "${vulnerability.title}"`)
    toast({
      title: "Comment added",
      description: `New comment added to ${vulnerability.title}`,
    })
  }

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onOpenChange}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>{isNewVulnerability ? 'Add New Vulnerability' : 'Edit Vulnerability'}</DialogTitle>
            <DialogDescription>
              {isNewVulnerability ? 'Enter the details of the new vulnerability here.' : 'Update the vulnerability details.'}
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="title" className="text-right">Title</Label>
              <Input
                id="title"
                value={editedVulnerability.title}
                onChange={(e) => setEditedVulnerability({ ...editedVulnerability, title: e.target.value })}
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="severity" className="text-right">Severity</Label>
              <Select
                value={editedVulnerability.severity}
                onValueChange={(value: Severity) => setEditedVulnerability({ ...editedVulnerability, severity: value })}
              >
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Critical">Critical</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Low">Low</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="type" className="text-right">Type</Label>
              <Input
                id="type"
                value={editedVulnerability.type}
                onChange={(e) => setEditedVulnerability({ ...editedVulnerability, type: e.target.value })}
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="score" className="text-right">Score</Label>
              <Input
                id="score"
                type="number"
                value={editedVulnerability.score}
                onChange={(e) => setEditedVulnerability({ ...editedVulnerability, score: parseFloat(e.target.value) })}
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="assignedTo" className="text-right">Assigned To</Label>
              <Select
                value={editedVulnerability.assignedTo[0] || ''}
                onValueChange={(value: string) => setEditedVulnerability({ ...editedVulnerability, assignedTo: [value] })}
              >
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select user" />
                </SelectTrigger>
                <SelectContent>
                  {initialUsers.map(user => (
                    <SelectItem key={user.id} value={user.name}>{user.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="startDate" className="text-right">Start Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant={"outline"}
                    className={`w-[280px] justify-start text-left font-normal`}
                  >
                    <Calendar className="mr-2 h-4 w-4" />
                    {format(editedVulnerability.startDate, "PPP")}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <CalendarComponent
                    mode="single"
                    selected={editedVulnerability.startDate}
                    onSelect={(date) => date && setEditedVulnerability({ ...editedVulnerability, startDate: date })}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="endDate" className="text-right">End Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant={"outline"}
                    className={`w-[280px] justify-start text-left font-normal`}
                  >
                    <Calendar className="mr-2 h-4 w-4" />
                    {format(editedVulnerability.endDate, "PPP")}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <CalendarComponent
                    mode="single"
                    selected={editedVulnerability.endDate}
                    onSelect={(date) => date && setEditedVulnerability({ ...editedVulnerability, endDate: date })}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
            {!isNewVulnerability && (
              <div className="grid grid-cols-4 items-start gap-4">
                <Label htmlFor="comments" className="text-right">Comments</Label>
                <div className="col-span-3 space-y-2">
                  {vulnerability?.comments?.map((comment, index) => (
                    <div key={index} className="p-2 rounded bg-secondary">
                      <p className="text-sm font-medium">{comment.user}</p>
                      <p className="text-sm">{comment.text}</p>
                      <p className="text-xs text-muted-foreground">{format(comment.timestamp, 'PP p')}</p>
                    </div>
                  ))}
                  <div className="flex gap-2">
                    <Textarea
                      placeholder="Add a comment..."
                      value={newComment}
                      onChange={(e) => setNewComment(e.target.value)}
                    />
                    <Button onClick={handleAddComment}>Add</Button>
                  </div>
                </div>
              </div>
            )}
          </div>
          <DialogFooter>
            <Button type="submit" onClick={handleSave}>
              {isNewVulnerability ? 'Add Vulnerability' : 'Update Vulnerability'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      <Dialog open={isSeverityDialogOpen} onOpenChange={onOpenChange}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Vulnerability Details</DialogTitle>
          </DialogHeader>
          {editedVulnerability && (
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="severity" className="text-right">
                  Severity
                </Label>
                <Select
                value={editedVulnerability.severity}
                onValueChange={(value: Severity) => setEditedVulnerability({ ...editedVulnerability, severity: value })}
              >
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Critical">Critical</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Low">Low</SelectItem>
                </SelectContent>
              </Select>
              </div>
            </div>
          )}
          <DialogFooter>
            <Button type="submit" onClick={handleSaveSeverityDialog}>Update vulnerability</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  )
}